#!/usr/bin/bash
#
#FUNCTION for install.sh

#zookeeper
func_zookeeper(){
	fab -H $node -f fab_inst.py zookeeper -u $REMOTE_USER -P --colorize-errors
}

#images prepare
func_images_prepare(){
	fab -H $master -f fab_inst.py prepare_images:IMAGES -u $REMOTE_USER -P --colorize-errors
	fab -H $node -f fab_inst.py prepare_images:IMAGES.nodes -u $REMOTE_USER -P --colorize-errors
}

#config prepare
func_config_prepare(){
	fab -H $master,$node -f fab_inst.py prepare -u $REMOTE_USER -P --colorize-errors
}

#mysql prepare
func_mysql_prepare(){
	fab -H $master -f fab_inst.py prepare_mysql -u $REMOTE_USER -P --colorize-errors
}

#reset
func_reset(){
	fab -H $master,$node -f fab_inst.py reset -u $REMOTE_USER -P --colorize-errors
}

#journalnode
func_journalnode(){
        fab -H $node -f fab_inst.py journalnode -u $REMOTE_USER -P --colorize-errors
}

#format zkfc&nodename
func_format(){
        fab -H $NN1_IP -f fab_inst.py format -u $REMOTE_USER --colorize-errors
}

#startnn1
func_startnn1(){
        fab -H $NN1_IP -f fab_inst.py startnn1 -u $REMOTE_USER --colorize-errors
}

#nn2 bootstrapstandby 
func_standby(){
        fab -H $NN2_IP -f fab_inst.py standby -u $REMOTE_USER --colorize-errors
}

#startnn2
func_startnn2(){
        fab -H $NN2_IP -f fab_inst.py startnn2 -u $REMOTE_USER --colorize-errors
}

#datanode
func_datanode(){
        fab -H $node -f fab_inst.py datanode -u $REMOTE_USER -P --colorize-errors
}

#nodemanager
func_nodemanager(){
        fab -H $NODES -f fab_inst.py nodemanager -u $REMOTE_USER -P --colorize-errors
}

#hmaster
func_hmaster(){
        fab -H $NN1_IP -f fab_inst.py hmaster -u $REMOTE_USER -P --colorize-errors
}

#hregion
func_hregion(){
        fab -H $node -f fab_inst.py hregion -u $REMOTE_USER -P --colorize-errors
}

#spark
func_spark(){
        fab -H $NN2_IP -f fab_inst.py spark -u $REMOTE_USER -P --colorize-errors
}

#sparkslave
func_sparkslave(){
        fab -H $node -f fab_inst.py sparkslave -u $REMOTE_USER -P --colorize-errors
}

#hue
func_hue(){
        fab -H $NN2_IP -f fab_inst.py hue -u $REMOTE_USER -P --colorize-errors
}

#mysql
func_mysql(){
        fab -H $NN2_IP -f fab_inst.py mysql -u $REMOTE_USER -P --colorize-errors
}

#hiveinit
func_hiveinit(){
        fab -H $NN2_IP -f fab_inst.py hiveinit -u $REMOTE_USER -P --colorize-errors
}

#hive
func_hive(){
        fab -H $NN2_IP -f fab_inst.py hive -u $REMOTE_USER -P --colorize-errors
}

#oozie
func_oozie(){
        fab -H $NN2_IP -f fab_inst.py oozie -u $REMOTE_USER -P --colorize-errors
}

#oozieinit
func_oozieinit(){
        fab -H $NN1_IP -f fab_inst.py oozieinit -u $REMOTE_USER -P --colorize-errors
}

#myweb
func_myweb(){
        fab -H $NN1_IP -f fab_inst.py myweb -u $REMOTE_USER -P --colorize-errors
}

#nginx
func_nginx(){
        fab -H $NN1_IP -f fab_inst.py nginx -u $REMOTE_USER -P --colorize-errors
}

#scope
func_scope(){
        fab -H $NODES -f fab_inst.py scope -u $REMOTE_USER -P --colorize-errors
}

#status
func_status(){
        fab -H $NN1_IP -f fab_inst.py status  -u $REMOTE_USER --colorize-errors
        fab -H $NN2_IP -f fab_inst.py status2 -u $REMOTE_USER --colorize-errors
        fab -H $node   -f fab_inst.py zstatus -u $REMOTE_USER --colorize-errors
        fab -H $NN2_IP -f fab_inst.py jupyterweb -u $REMOTE_USER --colorize-errors
}

#Generate index svc-hadoop.html
func_genindex(){
        echo -e "<h1>Services index of Hadoop 3.1.1</h1> 
<ul>
<li><a href=\"http://$NN1_IP/portstatus.php\" target='_black'>Services Port Status</a></li></br>
<li><a href=\"http://$NN1_IP:50070\" target='_black'>HDFS web nn1:  http://$NN1_IP:50070</a></li></br>
<li><a href=\"http://$NN2_IP:50070\" target='_black'>HDFS web nn2:  http://$NN2_IP:50070</a></li></br>
<li><a href=\"http://$NN1_IP:8088/cluster\" target='_black'>YARN web nn1:  http://$NN1_IP:8088/cluster</a></li></br>
<li><a href=\"http://$NN2_IP:8088/cluster\" target='_black'>YARN web nn2:  http://$NN2_IP:8088/cluster</a></li></br>
<li><a href=\"http://$NN1_IP:16010\" target='_black'>HBASE-master web UI:  http://$NN1_IP:16010</a></li></br>
<li><a href=\"http://$DN1_IP:16030\" target='_black'>HBASE region1:  http://$DN1_IP:16030</a></li></br>
<li><a href=\"http://$NN2_IP:8080\" target='_black'>SPARK-master web UI:  http://$NN2_IP:8080</a></li></br>
<li><a href=\"http://$DN1_IP:8081\" target='_black'>SPARK-slave1:  http://$DN1_IP:8081</a></li></br>
<li><a href=\"http://$NN2_IP:8983\" target='_black'>Solr web:  http://$NN2_IP:8983</a></li></br>
<li><a href=\"http://$NN2_IP:11000\" target='_black'>Oozie web:  http://$NN2_IP:11000</a></li></br>
<li><a href=\"http://$NN2_IP:8888\" target='_black'>HUE web:  http://$NN2_IP:8888</a></li></br>
<li><a href=\"http://$NN2_IP:8889?token=`more finish |grep token|grep -Po "token=\K.*"|awk '{print $1}'`\" target='_black'>Jupyter-Notebook:  http://$NN2_IP:8889?token=`more finish |grep token|grep -Po "token=\K.*"|awk '{print $1}'`</a></li></br>
<li><a href=\"http://$NN1_IP:4050\" target='_black'>Weavescope:  http://$NN1_IP:4050 default: admin/admin</a></li></br>
<li>NFS3 Gateway1:  mount -t nfs -o vers=3,proto=tcp,nolock,noacl $NN1_IP:/ /mnt</li></br>
<li>NFS3 Gateway2:  mount -t nfs -o vers=3,proto=tcp,nolock,noacl $NN2_IP:/ /mnt</li></br>
</ul>" \
 > svc-hadoop.html  
}

#finish 
func_finish(){
  sh updateMonIP.sh
  fab -H $NN1_IP -f fab_inst.py status     -u $REMOTE_USER --colorize-errors|tee finish 
  fab -H $NN2_IP -f fab_inst.py status2    -u $REMOTE_USER --colorize-errors|tee -a finish
  fab -H $node   -f fab_inst.py zstatus    -u $REMOTE_USER --colorize-errors|tee -a finish
  fab -H $NN2_IP -f fab_inst.py jupyterweb -u $REMOTE_USER --colorize-errors|tee -a finish
  str="\n"`cat README.md |tail -6|head -n -1|sed 's/#/ /g'`"\n\n"
  str+=`cat finish|awk -F'out:' '{print $2}'|grep -vP "WARNING|^$"`
  str+="\n Please browse http://$NN1_IP to check hadoop services, enjoy it!"
  echo -e "\033[45;42m $str \033[0m"
}

#stop
func_stop(){
        fab -H $NODES  -f fab_inst.py stopnm -u $REMOTE_USER -P --colorize-errors
        fab -H $master -f fab_inst.py stoprm -u $REMOTE_USER -P --colorize-errors
        fab -H $node   -f fab_inst.py stopdn -u $REMOTE_USER -P --colorize-errors
        fab -H $master -f fab_inst.py stopnn -u $REMOTE_USER -P --colorize-errors
        fab -H $node   -f fab_inst.py stopjn -u $REMOTE_USER -P --colorize-errors
}

#start
func_start(){
        fab -H $node   -f fab_inst.py startjn -u $REMOTE_USER -P --colorize-errors
        fab -H $master -f fab_inst.py startnn -u $REMOTE_USER -P --colorize-errors
        fab -H $node   -f fab_inst.py startdn -u $REMOTE_USER -P --colorize-errors
        fab -H $master -f fab_inst.py startrm -u $REMOTE_USER -P --colorize-errors
        fab -H $NODES  -f fab_inst.py startnm -u $REMOTE_USER -P --colorize-errors
}

#reboot
func_reboot(){
	fab -H $master,$node -f fab_inst.py reboot -u $REMOTE_USER -P --colorize-errors
}

#timezone8
func_timezone8(){
	fab -H $master,$node -f fab_inst.py timezone8 -u $REMOTE_USER -P --colorize-errors
}

#route
func_route(){
	fab -H $master,$node -f fab_inst.py route -u $REMOTE_USER -P  --colorize-errors
}

#cmd
func_cmd(){
	fab -H $master,$node -f fab_inst.py cmd:"$cmdstr" -u $REMOTE_USER  -P --colorize-errors
}

#putfile
func_putfile(){
	fab -H $master,$node -f fab_inst.py putfile:"$cmdstr" -u $REMOTE_USER  -P --colorize-errors
}

#getfile
func_getfile(){
	fab -H $master,$node -f fab_inst.py getfile:"$cmdstr" -u $REMOTE_USER  -P --colorize-errors
}


#END.
